'use strict';

var cov_op3526mbd = function () {
  var path = '/home/travis/build/urbanriskmap/cognicity-bot-core/src/index.js',
      hash = 'bc6b2b3867d8ac4426c7aa3b1abdbb679c242324',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/travis/build/urbanriskmap/cognicity-bot-core/src/index.js',
    statementMap: {
      '0': {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 25
        }
      },
      '1': {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 39
        }
      },
      '2': {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 35
        }
      },
      '3': {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 27
        }
      },
      '4': {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 56,
          column: 7
        }
      },
      '5': {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 55,
          column: 11
        }
      },
      '6': {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 31
        }
      },
      '7': {
        start: {
          line: 50,
          column: 24
        },
        end: {
          line: 50,
          column: 53
        }
      },
      '8': {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 25
        }
      },
      '9': {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 20
        }
      },
      '10': {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 77,
          column: 7
        }
      },
      '11': {
        start: {
          line: 70,
          column: 21
        },
        end: {
          line: 70,
          column: 64
        }
      },
      '12': {
        start: {
          line: 71,
          column: 6
        },
        end: {
          line: 76,
          column: 7
        }
      },
      '13': {
        start: {
          line: 71,
          column: 27
        },
        end: {
          line: 71,
          column: 74
        }
      },
      '14': {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 39
        }
      },
      '15': {
        start: {
          line: 74,
          column: 24
        },
        end: {
          line: 74,
          column: 55
        }
      },
      '16': {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 25
        }
      },
      '17': {
        start: {
          line: 88,
          column: 4
        },
        end: {
          line: 91,
          column: 7
        }
      },
      '18': {
        start: {
          line: 89,
          column: 22
        },
        end: {
          line: 89,
          column: 54
        }
      },
      '19': {
        start: {
          line: 90,
          column: 6
        },
        end: {
          line: 90,
          column: 23
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 20,
            column: 2
          },
          end: {
            line: 20,
            column: 3
          }
        },
        loc: {
          start: {
            line: 20,
            column: 22
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 20
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 43,
            column: 2
          },
          end: {
            line: 43,
            column: 3
          }
        },
        loc: {
          start: {
            line: 43,
            column: 19
          },
          end: {
            line: 57,
            column: 3
          }
        },
        line: 43
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 44,
            column: 23
          },
          end: {
            line: 44,
            column: 24
          }
        },
        loc: {
          start: {
            line: 44,
            column: 44
          },
          end: {
            line: 56,
            column: 5
          }
        },
        line: 44
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 47,
            column: 10
          },
          end: {
            line: 47,
            column: 11
          }
        },
        loc: {
          start: {
            line: 47,
            column: 22
          },
          end: {
            line: 53,
            column: 7
          }
        },
        line: 47
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 53,
            column: 15
          },
          end: {
            line: 53,
            column: 16
          }
        },
        loc: {
          start: {
            line: 53,
            column: 24
          },
          end: {
            line: 55,
            column: 9
          }
        },
        line: 53
      },
      '5': {
        name: '(anonymous_5)',
        decl: {
          start: {
            line: 68,
            column: 2
          },
          end: {
            line: 68,
            column: 3
          }
        },
        loc: {
          start: {
            line: 68,
            column: 21
          },
          end: {
            line: 78,
            column: 3
          }
        },
        line: 68
      },
      '6': {
        name: '(anonymous_6)',
        decl: {
          start: {
            line: 69,
            column: 23
          },
          end: {
            line: 69,
            column: 24
          }
        },
        loc: {
          start: {
            line: 69,
            column: 43
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 69
      },
      '7': {
        name: '(anonymous_7)',
        decl: {
          start: {
            line: 87,
            column: 2
          },
          end: {
            line: 87,
            column: 3
          }
        },
        loc: {
          start: {
            line: 87,
            column: 22
          },
          end: {
            line: 92,
            column: 3
          }
        },
        line: 87
      },
      '8': {
        name: '(anonymous_8)',
        decl: {
          start: {
            line: 88,
            column: 23
          },
          end: {
            line: 88,
            column: 24
          }
        },
        loc: {
          start: {
            line: 88,
            column: 44
          },
          end: {
            line: 91,
            column: 5
          }
        },
        line: 88
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 71,
            column: 6
          },
          end: {
            line: 76,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 71,
            column: 6
          },
          end: {
            line: 76,
            column: 7
          }
        }, {
          start: {
            line: 71,
            column: 6
          },
          end: {
            line: 76,
            column: 7
          }
        }],
        line: 71
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0
    },
    b: {
      '0': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _regions = require('./lib/regions');

var _regions2 = _interopRequireDefault(_regions);

var _cards = require('./lib/cards');

var _cards2 = _interopRequireDefault(_cards);

var _replies = require('./lib/replies');

var _replies2 = _interopRequireDefault(_replies);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Bot class - Prepated statements for CogniCity chatbot
 * @class Bot
 */
var Bot = function () {
  /**
   * constructor for class Bot
   * @param {Object} config - bot parameters
   * @param {String} config.CARDS_API - cards endpoint
   * @param {String} config.CARDS_API_KEY - cards endpoint API key
   * @param {String} config.CARDS_URL - client card resources
   * @param {String} config.DEFAULT_LANGUAGE - default language
   * @param {String} config.MAP_URL - client address for map
   * @param {Object} config.MESSAGES - vocabulary object for bot
   */
  function Bot(config) {
    _classCallCheck(this, Bot);

    cov_op3526mbd.f[0]++;
    cov_op3526mbd.s[0]++;

    // Config
    this.config = config;

    // Setup language and messaging
    cov_op3526mbd.s[1]++;
    this.replies = new _replies2.default(config);

    // Cards class for handling card requests
    cov_op3526mbd.s[2]++;
    this.cards = new _cards2.default(config);

    // Regions constants for replies
    cov_op3526mbd.s[3]++;
    this.regions = _regions2.default;
  }

  /**
   * sendCard - Method to send report card to Telegram user
   * @method sendCard
   * @param {Object} properties - properties of message to send
   * @param {String} properties.language - language of response
   * @param {String} properties.network - network name for response
   * @param {String} properties.userId - user ID
   * @return {String} - message to send
   */


  _createClass(Bot, [{
    key: 'card',
    value: function card(properties) {
      var _this = this;

      cov_op3526mbd.f[1]++;
      cov_op3526mbd.s[4]++;

      return new Promise(function (resolve, reject) {
        cov_op3526mbd.f[2]++;
        cov_op3526mbd.s[5]++;

        // Get a card id
        _this.cards.getCardId(properties).then(function (cardId) {
          cov_op3526mbd.f[3]++;
          cov_op3526mbd.s[6]++;

          // Build the response
          properties.cardId = cardId;
          var message = (cov_op3526mbd.s[7]++, _this.replies.card(properties));
          // Return the message
          cov_op3526mbd.s[8]++;
          resolve(message);
        }).catch(function (err) {
          cov_op3526mbd.f[4]++;
          cov_op3526mbd.s[9]++;

          reject(err);
        });
      });
    }

    /**
     * sendThanks - Method to send report link to Telegram user
     * @method sendThanks
     * @param {Object} properties - properties of message to send
     * @param {String} properties.reportId - report identifier for uniquie link
     * @param {String} properties.language - language of response
     * @param {String} properties.instanceRegionCode - CogniCity region code
     * @return {Promise} - result of _sendMessage request
     */

  }, {
    key: 'thanks',
    value: function thanks(properties) {
      var _this2 = this;

      cov_op3526mbd.f[5]++;
      cov_op3526mbd.s[10]++;

      return new Promise(function (resolve, reject) {
        cov_op3526mbd.f[6]++;

        var region = (cov_op3526mbd.s[11]++, _this2.regions(properties.instanceRegionCode));
        cov_op3526mbd.s[12]++;
        if (region === null) {
            cov_op3526mbd.b[0][0]++;
            cov_op3526mbd.s[13]++;
            reject(new Error('Instance region not found'));
          } else {
          cov_op3526mbd.b[0][1]++;
          cov_op3526mbd.s[14]++;

          properties.regionName = region;
          var message = (cov_op3526mbd.s[15]++, _this2.replies.thanks(properties));
          cov_op3526mbd.s[16]++;
          resolve(message);
        }
      });
    }

    /**
     * sendDefault - Method to send default message Telegram user
     * @method sendDefault
     * @param {Object} properties - properties of message to send
     * @param {String} properties.language - language of response
     * @return {Promise} - result of _sendMessage request
     */

  }, {
    key: 'default',
    value: function _default(properties) {
      var _this3 = this;

      cov_op3526mbd.f[7]++;
      cov_op3526mbd.s[17]++;

      return new Promise(function (resolve, reject) {
        cov_op3526mbd.f[8]++;

        var message = (cov_op3526mbd.s[18]++, _this3.replies.default(properties));
        cov_op3526mbd.s[19]++;
        resolve(message);
      });
    }
  }]);

  return Bot;
}();

exports.default = Bot;