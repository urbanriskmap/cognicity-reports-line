'use strict';

var cov_2cz4jvqns2 = function () {
    var path = '/home/travis/build/urbanriskmap/cognicity-bot-core/src/lib/cards.js',
        hash = '19b190495e48c43624a378bc3557aa2cfbda93ae',
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = '__coverage__',
        coverageData = {
        path: '/home/travis/build/urbanriskmap/cognicity-bot-core/src/lib/cards.js',
        statementMap: {
            '0': {
                start: {
                    line: 15,
                    column: 8
                },
                end: {
                    line: 15,
                    column: 29
                }
            },
            '1': {
                start: {
                    line: 16,
                    column: 8
                },
                end: {
                    line: 16,
                    column: 27
                }
            },
            '2': {
                start: {
                    line: 27,
                    column: 8
                },
                end: {
                    line: 51,
                    column: 11
                }
            },
            '3': {
                start: {
                    line: 28,
                    column: 28
                },
                end: {
                    line: 32,
                    column: 13
                }
            },
            '4': {
                start: {
                    line: 34,
                    column: 25
                },
                end: {
                    line: 38,
                    column: 13
                }
            },
            '5': {
                start: {
                    line: 41,
                    column: 12
                },
                end: {
                    line: 50,
                    column: 45
                }
            },
            '6': {
                start: {
                    line: 43,
                    column: 20
                },
                end: {
                    line: 48,
                    column: 21
                }
            },
            '7': {
                start: {
                    line: 44,
                    column: 24
                },
                end: {
                    line: 44,
                    column: 49
                }
            },
            '8': {
                start: {
                    line: 46,
                    column: 24
                },
                end: {
                    line: 47,
                    column: 72
                }
            },
            '9': {
                start: {
                    line: 50,
                    column: 32
                },
                end: {
                    line: 50,
                    column: 43
                }
            }
        },
        fnMap: {
            '0': {
                name: '(anonymous_0)',
                decl: {
                    start: {
                        line: 14,
                        column: 4
                    },
                    end: {
                        line: 14,
                        column: 5
                    }
                },
                loc: {
                    start: {
                        line: 14,
                        column: 24
                    },
                    end: {
                        line: 17,
                        column: 5
                    }
                },
                line: 14
            },
            '1': {
                name: '(anonymous_1)',
                decl: {
                    start: {
                        line: 26,
                        column: 4
                    },
                    end: {
                        line: 26,
                        column: 5
                    }
                },
                loc: {
                    start: {
                        line: 26,
                        column: 26
                    },
                    end: {
                        line: 52,
                        column: 5
                    }
                },
                line: 26
            },
            '2': {
                name: '(anonymous_2)',
                decl: {
                    start: {
                        line: 27,
                        column: 27
                    },
                    end: {
                        line: 27,
                        column: 28
                    }
                },
                loc: {
                    start: {
                        line: 27,
                        column: 48
                    },
                    end: {
                        line: 51,
                        column: 9
                    }
                },
                line: 27
            },
            '3': {
                name: '(anonymous_3)',
                decl: {
                    start: {
                        line: 42,
                        column: 22
                    },
                    end: {
                        line: 42,
                        column: 23
                    }
                },
                loc: {
                    start: {
                        line: 42,
                        column: 31
                    },
                    end: {
                        line: 49,
                        column: 17
                    }
                },
                line: 42
            },
            '4': {
                name: '(anonymous_4)',
                decl: {
                    start: {
                        line: 50,
                        column: 23
                    },
                    end: {
                        line: 50,
                        column: 24
                    }
                },
                loc: {
                    start: {
                        line: 50,
                        column: 32
                    },
                    end: {
                        line: 50,
                        column: 43
                    }
                },
                line: 50
            }
        },
        branchMap: {
            '0': {
                loc: {
                    start: {
                        line: 43,
                        column: 20
                    },
                    end: {
                        line: 48,
                        column: 21
                    }
                },
                type: 'if',
                locations: [{
                    start: {
                        line: 43,
                        column: 20
                    },
                    end: {
                        line: 48,
                        column: 21
                    }
                }, {
                    start: {
                        line: 43,
                        column: 20
                    },
                    end: {
                        line: 48,
                        column: 21
                    }
                }],
                line: 43
            }
        },
        s: {
            '0': 0,
            '1': 0,
            '2': 0,
            '3': 0,
            '4': 0,
            '5': 0,
            '6': 0,
            '7': 0,
            '8': 0,
            '9': 0
        },
        f: {
            '0': 0,
            '1': 0,
            '2': 0,
            '3': 0,
            '4': 0
        },
        b: {
            '0': [0, 0]
        },
        _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
    },
        coverage = global[gcv] || (global[gcv] = {});

    if (coverage[path] && coverage[path].hash === hash) {
        return coverage[path];
    }

    coverageData.hash = hash;
    return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Cards class - get CogniCity report card links
 * @class Cards
 */
var Cards = function () {
    /**
     * Constructor for class Cards
     * @param {Object} config - configuration object
     * @param {String} config.CARDS_API - cards endpoint
     * @param {String} config.CARDS_API_KEY - cards endpoint API key
     */
    function Cards(config) {
        _classCallCheck(this, Cards);

        cov_2cz4jvqns2.f[0]++;
        cov_2cz4jvqns2.s[0]++;

        this.config = config;
        cov_2cz4jvqns2.s[1]++;
        this.axios = _axios2.default;
    }
    /**
     * getCard - get a new CogniCity card
     * @param {Object} properties - card request properties
     * @param {String} properties.userId - unique user identifier
     * @param {String} properties.network - user network (e.g. 'Telegram')
     * @param {String} properties.language - user language code (e.g. 'en')
     * @return {Promise} Request response
     */


    _createClass(Cards, [{
        key: 'getCardId',
        value: function getCardId(properties) {
            var _this = this;

            cov_2cz4jvqns2.f[1]++;
            cov_2cz4jvqns2.s[2]++;

            return new Promise(function (resolve, reject) {
                cov_2cz4jvqns2.f[2]++;

                var headers = (cov_2cz4jvqns2.s[3]++, {
                    'headers': {
                        'x-api-key': _this.config.CARDS_API_KEY
                    }
                });

                var body = (cov_2cz4jvqns2.s[4]++, {
                    username: properties.userId,
                    network: properties.network,
                    language: properties.language
                });

                // TODO verify whether res.statusCode is an object on this endpoint.
                cov_2cz4jvqns2.s[5]++;
                _this.axios.post(_this.config.CARDS_API, body, headers).then(function (res) {
                    cov_2cz4jvqns2.f[3]++;
                    cov_2cz4jvqns2.s[6]++;

                    if (res.data.created === true) {
                        cov_2cz4jvqns2.b[0][0]++;
                        cov_2cz4jvqns2.s[7]++;

                        resolve(res.data.cardId);
                    } else {
                        cov_2cz4jvqns2.b[0][1]++;
                        cov_2cz4jvqns2.s[8]++;

                        reject(new Error('Could not get new card from server.' + ' Result was ' + JSON.stringify(res.data)));
                    }
                }).catch(function (err) {
                    cov_2cz4jvqns2.f[4]++;
                    cov_2cz4jvqns2.s[9]++;
                    return reject(err);
                });
            });
        }
    }]);

    return Cards;
}();

exports.default = Cards;