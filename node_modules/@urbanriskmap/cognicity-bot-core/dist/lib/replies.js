'use strict';

var cov_qulrsulwh = function () {
  var path = '/home/travis/build/urbanriskmap/cognicity-bot-core/src/lib/replies.js',
      hash = '630baa559126f7e9a23c70ac751a0318dde1d013',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/travis/build/urbanriskmap/cognicity-bot-core/src/lib/replies.js',
    statementMap: {
      '0': {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 37
        }
      },
      '1': {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 35
        }
      },
      '2': {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 47
        }
      },
      '3': {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 51
        }
      },
      '4': {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 33
        }
      },
      '5': {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 36
        }
      },
      '6': {
        start: {
          line: 30,
          column: 15
        },
        end: {
          line: 30,
          column: 64
        }
      },
      '7': {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      '8': {
        start: {
          line: 33,
          column: 6
        },
        end: {
          line: 33,
          column: 62
        }
      },
      '9': {
        start: {
          line: 35,
          column: 21
        },
        end: {
          line: 35,
          column: 33
        }
      },
      '10': {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 20
        }
      },
      '11': {
        start: {
          line: 47,
          column: 15
        },
        end: {
          line: 47,
          column: 61
        }
      },
      '12': {
        start: {
          line: 48,
          column: 15
        },
        end: {
          line: 48,
          column: 47
        }
      },
      '13': {
        start: {
          line: 49,
          column: 19
        },
        end: {
          line: 49,
          column: 51
        }
      },
      '14': {
        start: {
          line: 50,
          column: 25
        },
        end: {
          line: 50,
          column: 63
        }
      },
      '15': {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 54,
          column: 5
        }
      },
      '16': {
        start: {
          line: 53,
          column: 6
        },
        end: {
          line: 53,
          column: 59
        }
      },
      '17': {
        start: {
          line: 55,
          column: 21
        },
        end: {
          line: 60,
          column: 5
        }
      },
      '18': {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 61,
          column: 20
        }
      },
      '19': {
        start: {
          line: 73,
          column: 15
        },
        end: {
          line: 73,
          column: 63
        }
      },
      '20': {
        start: {
          line: 74,
          column: 15
        },
        end: {
          line: 75,
          column: 33
        }
      },
      '21': {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      '22': {
        start: {
          line: 78,
          column: 6
        },
        end: {
          line: 78,
          column: 61
        }
      },
      '23': {
        start: {
          line: 80,
          column: 21
        },
        end: {
          line: 80,
          column: 45
        }
      },
      '24': {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 81,
          column: 20
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 14,
            column: 2
          },
          end: {
            line: 14,
            column: 3
          }
        },
        loc: {
          start: {
            line: 14,
            column: 22
          },
          end: {
            line: 21,
            column: 3
          }
        },
        line: 14
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 29,
            column: 3
          }
        },
        loc: {
          start: {
            line: 29,
            column: 22
          },
          end: {
            line: 37,
            column: 3
          }
        },
        line: 29
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 46,
            column: 2
          },
          end: {
            line: 46,
            column: 3
          }
        },
        loc: {
          start: {
            line: 46,
            column: 19
          },
          end: {
            line: 62,
            column: 3
          }
        },
        line: 46
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 72,
            column: 2
          },
          end: {
            line: 72,
            column: 3
          }
        },
        loc: {
          start: {
            line: 72,
            column: 21
          },
          end: {
            line: 82,
            column: 3
          }
        },
        line: 72
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        }, {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        }],
        line: 32
      },
      '1': {
        loc: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        }, {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        }],
        line: 52
      },
      '2': {
        loc: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        }, {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        }],
        line: 77
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Class for constructing CogniCity bot messages
 * @class Messages
 */
var Replies = function () {
  /**
   * Constructor for Messages class
   * @param {Object} config - class configuration
   * @param {String} config.cardsUrl - client endpoint for cards
   * @param {String} config.DEFAULT_LANGUAGE - bot messages object
   * @param {Object} config.MESSAGES - bot messages object
    */
  function Replies(config) {
    _classCallCheck(this, Replies);

    cov_qulrsulwh.f[0]++;
    cov_qulrsulwh.s[0]++;

    this.cardsUrl = config.CARDS_URL;
    cov_qulrsulwh.s[1]++;
    this.prepUrl = config.PREP_URL;
    cov_qulrsulwh.s[2]++;
    this.assessmentUrl = config.ASSESSMENT_URL;
    cov_qulrsulwh.s[3]++;
    this.defaultLanguage = config.DEFAULT_LANGUAGE;
    cov_qulrsulwh.s[4]++;
    this.mapUrl = config.MAP_URL;
    cov_qulrsulwh.s[5]++;
    this.messages = config.MESSAGES;
  }

  /**
   * Construct default message
   * @param {Object} properties - properties for message
   * @param {String} properties.language - user language code
   * @return {Object} - reply object
   */


  _createClass(Replies, [{
    key: 'default',
    value: function _default(properties) {
      cov_qulrsulwh.f[1]++;

      var text = (cov_qulrsulwh.s[6]++, this.messages[this.defaultLanguage].texts.default);

      cov_qulrsulwh.s[7]++;
      if (properties.language in this.messages) {
        cov_qulrsulwh.b[0][0]++;
        cov_qulrsulwh.s[8]++;

        text = this.messages[properties.language].texts.default;
      } else {
        cov_qulrsulwh.b[0][1]++;
      }
      var response = (cov_qulrsulwh.s[9]++, { text: text });
      cov_qulrsulwh.s[10]++;
      return response;
    }

    /**
     * Construct card message
     * @param {Object} properties - properties for message
     * @param {String} properties.language - user language code
     * @param {String} properties.cardId - card ID
     * @return {Object} - reply object
     */

  }, {
    key: 'card',
    value: function card(properties) {
      cov_qulrsulwh.f[2]++;

      var text = (cov_qulrsulwh.s[11]++, this.messages[this.defaultLanguage].texts.card);
      var link = (cov_qulrsulwh.s[12]++, this.cardsUrl + properties.cardId);
      var prepLink = (cov_qulrsulwh.s[13]++, this.prepUrl + properties.cardId);
      var assessmentLink = (cov_qulrsulwh.s[14]++, this.assessmentUrl + properties.cardId);

      cov_qulrsulwh.s[15]++;
      if (properties.language in this.messages) {
        cov_qulrsulwh.b[1][0]++;
        cov_qulrsulwh.s[16]++;

        text = this.messages[properties.language].texts.card;
      } else {
        cov_qulrsulwh.b[1][1]++;
      }
      var response = (cov_qulrsulwh.s[17]++, {
        text: text,
        link: link,
        prepLink: prepLink,
        assessmentLink: assessmentLink
      });
      cov_qulrsulwh.s[18]++;
      return response;
    }

    /**
     * Construct thanks message
     * @param {Object} properties - properties for message
     * @param {String} properties.language - user language code
     * @param {String} properties.regionName - region name for map link
     * @param {String} properties.reportId - report ID
     * @return {Object} - reply object
     */

  }, {
    key: 'thanks',
    value: function thanks(properties) {
      cov_qulrsulwh.f[3]++;

      var text = (cov_qulrsulwh.s[19]++, this.messages[this.defaultLanguage].texts.thanks);
      var link = (cov_qulrsulwh.s[20]++, this.mapUrl + properties.regionName + '/?id=' + properties.reportId);

      cov_qulrsulwh.s[21]++;
      if (properties.language in this.messages) {
        cov_qulrsulwh.b[2][0]++;
        cov_qulrsulwh.s[22]++;

        text = this.messages[properties.language].texts.thanks;
      } else {
        cov_qulrsulwh.b[2][1]++;
      }
      var response = (cov_qulrsulwh.s[23]++, { text: text, link: link });
      cov_qulrsulwh.s[24]++;
      return response;
    }
  }]);

  return Replies;
}();

exports.default = Replies;